name: Build docker containers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to GHCR
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        file: Dockerfile
        push: false
        load: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        build-args: |
          RELEASE=--release
          ARCH=amd64
          RELEASE_DIR=release
        cache-from: type=local,src=/tmp/.buildx-cache

    - name: Run Docker container
      run: docker run -p 127.0.0.1:3033:3033 -v $PWD/data:/data -e RUN_TESTS=true ${{ env.REGISTRY }}/${{ github.repository }}:latest

    - name: Copy and handle logs
      if: ${{ always() }}
      run: |
          CONTAINER_ID=$(docker ps -aq --latest --filter "status=exited")
          if [ -z "$CONTAINER_ID" ]; then
            echo "No recently exited containers found."
            exit 1
          fi
          docker cp $CONTAINER_ID:/tmp/ /tmp/container_tmp/
          mkdir -p /tmp/logs
          find /tmp/container_tmp/ -name "*.log" -exec mv {} /tmp/logs/ \;
          if [ "$(ls -A /tmp/logs/)" ]; then
            zip -j /tmp/log-files.zip /tmp/logs/*.log
            echo "Logs zipped successfully."
          else
            echo "No log files found"
          fi

    - name: Upload logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: log-files.zip
        path: /tmp/log-files.zip

    - name: Push Docker image to GitHub Packages
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v2
      with:
        file: Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        build-args: |
          RELEASE=--release
          ARCH=amd64
          RELEASE_DIR=release
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move Docker cache
      run: |
        rm -rf /tmp/.buildx-cache
        if [ -d "/tmp/.buildx-cache-new" ]; then
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        fi
